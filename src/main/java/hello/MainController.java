package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.transaction.Transactional;
import java.util.NoSuchElementException;
import org.json.JSONObject;
import java.util.List;
import java.util.Date;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import java.text.ParseException;

@Transactional
@RestController
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private PassengerRepository passengerRepository;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ReservationRepository reservationRepository;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private FlightRepository flightRepository;

	//Passenger Section

	@RequestMapping(path = "/passenger/{id}", method = RequestMethod.GET)
	public @ResponseBody ResponseEntity getPassenger (@PathVariable("id") String id) {
		Passenger result = passengerRepository.findById(id);

		if(result != null) {
			try {
				return new ResponseEntity<Passenger>(result,HttpStatus.OK);
			} catch (NoSuchElementException e) {
				throw new IllegalArgumentException("Passenger not found!");
			}
		} else {
			return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Sorry, the requested passenger with id "
					+ id +" does not exist"), HttpStatus.NOT_FOUND);
		}
	}

	@RequestMapping(path="/passenger", method = RequestMethod.POST)
	public @ResponseBody ResponseEntity addNewPassenger (@RequestParam String firstname,
														 @RequestParam String lastname,
														 @RequestParam int age,
														 @RequestParam String gender,
														 @RequestParam String phone) {

		Passenger result = passengerRepository.findByPhone(phone);
		if (result == null) {
			Passenger passenger = new Passenger(firstname, lastname, age, gender, phone);
			try {
				passengerRepository.save(passenger);
				return new ResponseEntity<Passenger>(passenger, HttpStatus.OK);
			} catch (Exception e) {
				return new ResponseEntity<>(errorGenerator("BadRequest", "400", "Another passenger with the same number already exists" ),HttpStatus.BAD_REQUEST);
			}
		} else {
			return new ResponseEntity<>(errorGenerator("BadRequest", "400", "Another passenger with the same number already exists" ),HttpStatus.BAD_REQUEST);
		}
	}

	@RequestMapping(path="/passenger", method = RequestMethod.PUT)
	public @ResponseBody ResponseEntity updatePassenger(@RequestParam String id,
														@RequestParam String firstname,
														@RequestParam String lastname,
														@RequestParam int age,
														@RequestParam String gender,
														@RequestParam String phone) {
		Passenger result = passengerRepository.findById(id);
		if (result != null) {
			try {
				Passenger temp =passengerRepository.findByPhone(phone);
				if(temp != null && temp.getId() != result.getId()) {
					return  new ResponseEntity<>(errorGenerator("BadRequest", "404",
							"Sorry, the passenger with phone number "+temp.getPhone()
									+" already exists in the DB!" ),HttpStatus.NOT_FOUND);
				}
				result.setFirstname(firstname);
				result.setLastname(lastname);
				result.setAge(age);
				result.setGender(gender);
				result.setPhone(phone);
				passengerRepository.save(result);
				return new ResponseEntity<Passenger>(result, HttpStatus.OK);
			} catch (Exception e) {
				return new ResponseEntity<>(errorGenerator("BadRequest", "400", "Another passenger with the same number already exists" ),HttpStatus.BAD_REQUEST);
			}
		} else {
			return  new ResponseEntity<>(errorGenerator("BadRequest", "404",
					"Sorry, the requested passenger was not updated" ),HttpStatus.BAD_REQUEST);
		}
	}

	@RequestMapping(value="/passenger/{id}", method=RequestMethod.DELETE)
	public @ResponseBody ResponseEntity deletePassenger(@PathVariable("id") String id) {
		Passenger passenger = passengerRepository.findById(id);
		if (passenger != null) {
			try{
				List<Reservation> reservations = reservationRepository.findByPassenger(passenger);
				for(Reservation reservation : reservations){
					deleteReservation(reservation, passenger);
				}
				passengerRepository.delete(passenger);
				return new ResponseEntity<Passenger>(passenger, HttpStatus.OK);
			}
			catch(Exception e){
				e.printStackTrace();
				return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Sorry, there was some problem deleting the passenger. Please try again."), HttpStatus.INTERNAL_SERVER_ERROR);
			}
		} else {
			return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Sorry, the requested passenger with id " + id +" does not exist" ), HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping(path = "/passenger/all")
	public @ResponseBody Iterable<Passenger> getAllPassenger(){
		return passengerRepository.findAll();
	}

	@GetMapping(path = "/reservation/all")
	public @ResponseBody Iterable<Reservation> getAllReservation(){
		return reservationRepository.findAll();
	}

	@GetMapping(path = "/flight/all")
	public @ResponseBody Iterable<Flight> getAllFlight(){
		return flightRepository.findAll();
	}

	//Reservation Section

	@RequestMapping(path = "/reservation/{number}", method = RequestMethod.GET)
	public @ResponseBody ResponseEntity getReservation (@PathVariable("number") String number) {
		Reservation result = reservationRepository.findByReservationNumber(number);

		if(result != null) {
			try {
				return new ResponseEntity<Reservation>(result,HttpStatus.OK);
			} catch (NoSuchElementException e) {
				throw new IllegalArgumentException("Reservation not found!");
			}
		} else {
			return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Reserveration with number "
					+ number +" does not exist"), HttpStatus.NOT_FOUND);
		}
	}

	@RequestMapping(path="/reservation", method = RequestMethod.POST)
	public @ResponseBody ResponseEntity addNewReservation (@RequestParam String passengerid,
														   @RequestParam String flightlists) {

        Reservation reservation = new Reservation();
        Passenger passenger = passengerRepository.findById(passengerid);
        reservation.setPassenger(passenger);

        List<Flight> flightlistObects=null;
		if(flightlists != null){
			String[] flightsAddedList = flightlists.split(",");
			for(String s: flightsAddedList){
				if(checkFlightExistance(s)!= null){
					return checkFlightExistance(s);
				}
			}
			flightlistObects = getFlights(flightsAddedList);
		}

        double totalPrice = 0.0;
        for (Flight flight : flightlistObects) {
            totalPrice += flight.getPrice();
            flight.setSeatsLeft(flight.getPlane().getCapacity() - 1);
        }
        reservation.setPrice(totalPrice);
        reservation.setFlights(flightlistObects);
        try {
            reservationRepository.save(reservation);
        } catch (Exception e) {
            return new ResponseEntity<>(errorGenerator("BadRequest", "400", "Something wrong" ),HttpStatus.BAD_REQUEST);
        }

        Reservation result = reservationRepository.findByReservationNumber(reservation.getReservationNumber());
        return new ResponseEntity<Reservation>(result,HttpStatus.OK);
	}

	@RequestMapping(path="/reservation/{number}", method = RequestMethod.POST)
	public @ResponseBody ResponseEntity updateReservation (@RequestParam String reservationnumber,
														   @RequestParam String addflightlists,
														   @RequestParam String removeflightlists) {
		List<Flight> flightAddedObects=null;
		List<Flight> flightRemovedObects=null;

		if(addflightlists != null){
			String[] flightsAddedList = addflightlists.split(",");
			for(String s: flightsAddedList){
				if(checkFlightExistance(s)!= null){
					return checkFlightExistance(s);
				}
			}
			flightAddedObects = getFlights(flightsAddedList);
		}

		if(removeflightlists!=null){
			String[] flightsRemovedList=removeflightlists.split(",");

			for(String s: flightsRemovedList){
				if(checkFlightExistance(s)!=null){
					return checkFlightExistance(s);
				}
				flightRemovedObects = getFlights(flightsRemovedList);
			}
		}

		if(flightRemovedObects != null){
			ResponseEntity<?> obj = updateReservatonRemoveFlights(reservationnumber, flightRemovedObects);
			if(obj != null) return obj;
		}

		if(flightAddedObects!=null){
			ResponseEntity<?> response = updateReservationAddFlights(reservationnumber, flightAddedObects);
			if(response.getStatusCode() == HttpStatus.NOT_FOUND){
				return response;
			}
		}
		return getReservation(reservationnumber);
	}

	@RequestMapping(path = "/reservation/{reservationNumber}", method = RequestMethod.DELETE)
	public @ResponseBody ResponseEntity deleteReservation(@PathVariable("reservationNumber") String reservationNumber){
		Reservation result = reservationRepository.findByReservationNumber(reservationNumber);
		if (result != null) {
            try{
                reservationRepository.delete(result);
                return new ResponseEntity<Object>("Reservation with Number " + reservationNumber + " is deleted successfully", HttpStatus.OK);
            }catch(NoSuchElementException e) {
                e.printStackTrace();
            }
        } else {
            return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Reserveration with number "
                    + reservationNumber +" does not exist"), HttpStatus.NOT_FOUND);
        }
		try{
			reservationRepository.delete(result);
			return new ResponseEntity<Object>("Reservation with Number " + reservationNumber + " is deleted successfully", HttpStatus.OK);
		}catch(NoSuchElementException e) {
			return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Reserveration with number "
					+ reservationNumber +" does not exist"), HttpStatus.NOT_FOUND);
		}
	}

	//Flight Section

	@RequestMapping(path = "/flight/{flightnumber}", method = RequestMethod.GET)
	public @ResponseBody ResponseEntity getFlight (@PathVariable("flightnumber") String flightNumber) {
		Flight result = flightRepository.findByFlightnumber(flightNumber);

		if(result != null) {
			try {
				flightRepository.save(result);
				return new ResponseEntity<Flight>(result,HttpStatus.OK);
			} catch (NoSuchElementException e) {
				throw new IllegalArgumentException("Flight not found!");
			}
		} else {
			return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Sorry, the requested flight with id "
					+ flightNumber +" does not exist"), HttpStatus.NOT_FOUND);
		}
	}

	@RequestMapping(path="/flight/{flightNumber}", method = RequestMethod.POST) //Create/UpdateFlight API
	public @ResponseBody ResponseEntity addOrUpdateFlight(@PathVariable String flightNumber,
														  @RequestParam double price,
														  @RequestParam String origin,
														  @RequestParam String to,
														  @RequestParam String departureTime,
														  @RequestParam String arrivalTime,
														  @RequestParam String description,
														  @RequestParam int capacity,
														  @RequestParam String model,
														  @RequestParam String manufacturer,
														  @RequestParam int year){

		try{
			Flight flight = new Flight();
			flight.setFlightnumber(flightNumber);
			flight.setDescription(description);
			flight.setOrigin(origin);
			flight.setTo(to);
			flight.setPrice(price);
			Plane plane = new Plane();
			plane.setCapacity(capacity);
			plane.setManufacturer(manufacturer);
			plane.setModel(model);
			plane.setYearOfManufacture(year);
			flight.setPlane(plane);
			flight.setSeatsLeft(capacity);
			Date arrival =new SimpleDateFormat("yyyy-MM-dd-HH").parse(arrivalTime);
			Date departure =new SimpleDateFormat("yyyy-MM-dd-HH").parse(departureTime);
			flight.setArrivalTime(arrival);
			flight.setDepartureTime(departure);

			if((departure).compareTo(arrival)>0){
				return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Departure time cannot earlier than arrival time"), HttpStatus.NOT_FOUND);
			}

			flightRepository.save(flight);
			return new ResponseEntity<Flight>(flight, HttpStatus.OK);
		}catch(NumberFormatException e){
			return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Wrong Format"), HttpStatus.NOT_FOUND);
		}catch(ParseException e){
			return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Wrong Format"), HttpStatus.NOT_FOUND);
		}
	}

	@RequestMapping(path = "/flight/{flightNumber}", method = RequestMethod.DELETE)
	public @ResponseBody ResponseEntity deleteFlight (@PathVariable("flightNumber") String flightNumber){
		Flight result = flightRepository.findByFlightnumber(flightNumber);

		if(result != null) {
			try {
				flightRepository.delete(result);
				return new ResponseEntity<Object>("Flight with flightnumber XXX is deleted successfully", HttpStatus.OK);
			} catch (NoSuchElementException e) {
				throw new IllegalArgumentException("Flight not found!");
			}
		} else {
			return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Sorry, the requested flight with id "
					+ flightNumber +" does not exist"), HttpStatus.NOT_FOUND);
		}
	}

	//Helper
	public String errorGenerator(String header, String code, String message){
		JSONObject result = new JSONObject();
		JSONObject error = new JSONObject();

		try{
			result.put(header, error);
			error.put("code", code);
			error.put("msg", message);
		}catch(Exception e){

			e.getStackTrace();
		}

		return result.toString();
	}

	public void deleteReservation(Reservation reservation, Passenger passenger){
		try{
			for(Flight flight : reservation.getFlights()){
				updateFlightSeats(flight);
				flight.getPassenger().remove(passenger);
			}
			passenger.getReservations().remove(reservation);
			reservationRepository.delete(reservation);
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

	public void updateFlightSeats(Flight flight){
		try{
			flight.setSeatsLeft(flight.getSeatsLeft()+1);
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

	private List<Flight> checkCurrentreservationFlightsTimings(String passengerId, List<Flight> flightList) {
		for(int i=0;i<flightList.size();i++){
			for(int j=i+1;j<flightList.size();j++){
				Date currentFlightDepartureDate=flightList.get(i).getDepartureTime();
				Date currentFlightArrivalDate=flightList.get(i).getArrivalTime();
				Date min=flightList.get(j).getDepartureTime();
				Date max=flightList.get(j).getArrivalTime();
				if((currentFlightArrivalDate.compareTo(min)>=0 && currentFlightArrivalDate.compareTo(max)<=0) || (currentFlightDepartureDate.compareTo(min)>=0 && currentFlightDepartureDate.compareTo(max)<=0)){
					List<Flight> list= new ArrayList<Flight>();
					list.add(flightList.get(i));
					list.add(flightList.get(j));
					return list;
				}
			}
		}
		return null;

	}

	private List<Flight> checkWithExistingPassengerReservations(String passengerId, List<Flight> flightList){
		System.out.println("");
		List<Reservation> reservations=passengerRepository.findById(passengerId).getReservations();
		List<Flight> currentPassengerFlights=new ArrayList<Flight>();
		for(Reservation reservation:reservations){
			for(Flight flight:reservation.getFlights()){
				currentPassengerFlights.add(flight);
			}
		}
		for(int i=0;i<flightList.size();i++){
			for(int j=0;j<currentPassengerFlights.size();j++){
				try{
					Flight flight = flightList.get(i);
				}
				catch(Exception e){
					e.getStackTrace();
				}
				Date currentFlightDepartureDate=flightList.get(i).getDepartureTime();
				Date currentFlightArrivalDate=flightList.get(i).getArrivalTime();
				Date min=currentPassengerFlights.get(j).getDepartureTime();
				Date max=currentPassengerFlights.get(j).getArrivalTime();
				if((currentFlightArrivalDate.compareTo(min)>=0 && currentFlightArrivalDate.compareTo(max)<=0) || (currentFlightDepartureDate.compareTo(min)>=0 && currentFlightDepartureDate.compareTo(max)<=0)){
					List<Flight> list= new ArrayList<Flight>();
					list.add(flightList.get(i));
					list.add(currentPassengerFlights.get(j));
					return list;
				}
			}
		}
		return null;
	}

	public Flight checkSeats(List<Flight> flightList){
		for(Flight flight : flightList){
			if(flight.getSeatsLeft() <= 0) return flight;
		}
		return null;
	}

	public Flight decreaseFlightSeats(List<Flight> flightList){
		for(Flight flight : flightList){
			flight.setSeatsLeft(flight.getSeatsLeft()-1);
		}
		return null;
	}

	public ResponseEntity<?> checkFlightExistance(String flightNumber){
		if( flightRepository.findByFlightnumber(flightNumber)==null){
			return  new ResponseEntity<>(errorGenerator("Response", "404", "Flight with number "+flightNumber+" doesn't exist"),HttpStatus.NOT_FOUND);

		}
		return null;
	}

	public List<Flight> getFlights(String[] flight){
		List<Flight> flights=new ArrayList<Flight>();
		for(String currentFlightNumber:flight)
			flights.add(flightRepository.findByFlightnumber(currentFlightNumber));
		return flights;
	}

	public ResponseEntity<?> updateReservatonRemoveFlights(String number, List<Flight> removeFlights) {
		Reservation reservation = reservationRepository.findByReservationNumber(number);

		if(reservation == null){
			return  new ResponseEntity<>(errorGenerator("BadRequest", "404",
					"Sorry, the requested reservation with number "
							+ number + " does not exist"), HttpStatus.NOT_FOUND);
		}

		for(Flight flight: removeFlights)
			reservation.getFlights().remove(flight);
		reservationRepository.save(reservation);

		return null;
	}

	public ResponseEntity<?> updateReservationAddFlights(String number, List<Flight> flightsAdded) {
		Reservation reservation = reservationRepository.findByReservationNumber(number);
		String passengerId=reservation.getPassenger().getId();
		if(checkCurrentreservationFlightsTimings(passengerId, flightsAdded)==null &&
				checkWithExistingPassengerReservations(passengerId, flightsAdded)==null){
			for(Flight flight:flightsAdded)
				reservation.getFlights().add(flight);
			reservationRepository.save(reservation);

			return new ResponseEntity<>("Success",HttpStatus.OK);
		}
		else{
			List<Flight> currentReservationFlights=checkCurrentreservationFlightsTimings(passengerId, flightsAdded);
			List<Flight> passengerFlights=checkWithExistingPassengerReservations(passengerId, flightsAdded);
			if(currentReservationFlights!=null){
				return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Sorry, the timings of flights: "
						+currentReservationFlights.get(0).getFlightnumberumber() +" and "+ currentReservationFlights.get(1).getFlightnumberumber()+" overlap" ), HttpStatus.NOT_FOUND);
			}
			if(passengerFlights!=null){
				return new ResponseEntity<>(errorGenerator("BadRequest", "404", "Sorry, the timings of flights: "
						+currentReservationFlights.get(0).getFlightnumberumber() +" and "+ currentReservationFlights.get(1).getFlightnumberumber()+" overlap" ), HttpStatus.NOT_FOUND);
			}
			return  new ResponseEntity<>(errorGenerator("Response", "404", "Time Overlap Constraint Violated"),HttpStatus.NOT_FOUND);
		}
	}
}
